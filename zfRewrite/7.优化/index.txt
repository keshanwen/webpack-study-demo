1, 缩小范围
    resolve: {
        extensions: [".js", ".jsx", ".json", ".css"],
        alias: {
            "@": path.resolve(__dirname, "src"),
        },
        modules: [path.resolve(__dirname, "node_modules")],
    },

2, module.noParse 字段，可以用于配置哪些模块文件的内容不需要进行解析

    不需要解析依赖（即无依赖） 的第三方大型类库等，可以通过这个字段来配置，以提高整体的构建速度
    使用 noParse 进行忽略的模块文件中不能使用 import、require、define 等导入机制

3, IgnorePlugin用于忽略某些特定的模块，让 webpack 不把这些指定的模块打包进去

4.费时分析 
    speed-measure-webpack-plugin

 5.webpack-bundle-analyzer
    是一个webpack的插件，需要配合webpack和webpack-cli一起使用。这个插件的功能是生成代码分析报告，帮助提升代码质量和网站性能   

 6. 提取 css 
    因为CSS的下载和JS可以并行,当一个HTML文件很大的时候，我们可以把CSS单独提取出来加载s   
    mini-css-extract-plugin
    指定 css 目录  filename: "css/[name].css",

7.压缩JS、CSS和HTML
    optimize-css-assets-webpack-plugin是一个优化和压缩CSS资源的插件
    terser-webpack-plugin是一个优化和压缩JS资源的插件 
    一般生产环境下会压缩，但是可以自定义压缩规则,

 8.CDN 
    CDN 又叫内容分发网络，通过把资源部署到世界各地，用户在访问时按照就近原则从离用户最近的服务器获取资源，从而加速资源的获取速度。
    (1) 使用缓存    
        HTML文件不缓存，放在自己的服务器上，关闭自己服务器的缓存，静态资源的URL变成指向CDN服务器的地址
        静态的JavaScript、CSS、图片等文件开启CDN和缓存，并且文件名带上HASH值
        为了并行加载不阻塞，把不同的静态资源分配到不同的CDN服务器上  
    （2）域名限制
        同一时刻针对同一个域名的资源并行请求是有限制
        可以把这些静态资源分散到不同的 CDN 服务上去
        多个域名后会增加域名解析时间
        可以通过在 HTML HEAD 标签中 加入<link rel="dns-prefetch" href="http://img.zhufengpeixun.cn">去预解析域名，以降低域名解析带来的延迟
    （3）文件指纹 
        打包后输出的文件名和后缀
        hash一般是结合CDN缓存来使用，通过webpack构建之后，生成对应文件名自动带上对应的MD5值。
        如果文件内容改变的话，那么对应文件哈希值也会改变，对应的HTML引用的URL地址也会改变，触发CDN服务器从源服务器上拉取对应数据，进而更新本地缓存。
    
    占位符名称	含义

    ext	资源后缀名
    name	文件名称
    path	文件的相对路径
    folder	文件所在的文件夹
    hash	每次webpack构建时生成一个唯一的hash值
    chunkhash	根据chunk生成hash值，来源于同一个chunk，则hash值就一样
    contenthash	根据内容生成hash值，文件内容相同hash值就相同

    Hash 是整个项目的hash值，其根据每次编译内容计算得到，每次编译之后都会生成新的hash,即修改任何文件都会导致所有文件的hash发生改变
        const path = require("path");
        const glob = require("glob");
        const PurgecssPlugin = require("purgecss-webpack-plugin");
        const MiniCssExtractPlugin = require('mini-css-extract-plugin');
        const PATHS = {
        src: path.join(__dirname, 'src')
        }
        module.exports = {
        mode: "production",
        +  entry: {
        +    main: './src/index.js',
        +    vender:['lodash']
        +  },
        output:{
            path:path.resolve(__dirname,'dist'),
        +    filename:'[name].[hash].js'
        },
        devServer:{
            hot:false
        },
        module: {
            rules: [
            {
                test: /\.js/,
                include: path.resolve(__dirname, "src"),
                use: [
                {
                    loader:'thread-loader',
                    options:{
                    workers:3
                    }
                },
                {
                    loader: "babel-loader",
                    options: {
                    presets: ["@babel/preset-env", "@babel/preset-react"],
                    },
                },
                ],
            },
            {
                test: /\.css$/,
                include: path.resolve(__dirname, "src"),
                exclude: /node_modules/,
                use: [
                {
                    loader: MiniCssExtractPlugin.loader,
                },
                "css-loader",
                ],
            },
            ],
        },
        plugins: [
            new MiniCssExtractPlugin({
        +      filename: "[name].[hash].css"
            }),
            new PurgecssPlugin({
            paths: glob.sync(`${PATHS.src}/**/*`,  { nodir: true }),
            }),
        ],
        };

    chunkhash
        chunkhash 采用hash计算的话，每一次构建后生成的哈希值都不一样，即使文件内容压根没有改变。
        这样子是没办法实现缓存效果，我们需要换另一种哈希值计算方式，即chunkhash,chunkhash和hash不一样，
        它根据不同的入口文件(Entry)进行依赖文件解析、构建对应的chunk，生成对应的哈希值。
        我们在生产环境里把一些公共库和程序入口文件区分开，单独打包构建，接着我们采用chunkhash的方式生成哈希值，那么只要我们不改动公共库的代码，
        就可以保证其哈希值不会受影响

        const path = require("path");
        const glob = require("glob");
        const PurgecssPlugin = require("purgecss-webpack-plugin");
        const MiniCssExtractPlugin = require('mini-css-extract-plugin');
        const PATHS = {
        src: path.join(__dirname, 'src')
        }
        module.exports = {
        mode: "production",
        entry: {
            main: './src/index.js',
            vender:['lodash']
        },
        output:{
            path:path.resolve(__dirname,'dist'),
        +    filename:'[name].[chunkhash].js'
        },
        devServer:{
            hot:false
        },
        module: {
            rules: [
            {
                test: /\.js/,
                include: path.resolve(__dirname, "src"),
                use: [
                {
                    loader:'thread-loader',
                    options:{
                    workers:3
                    }
                },
                {
                    loader: "babel-loader",
                    options: {
                    presets: ["@babel/preset-env", "@babel/preset-react"],
                    },
                },
                ],
            },
            {
                test: /\.css$/,
                include: path.resolve(__dirname, "src"),
                exclude: /node_modules/,
                use: [
                {
                    loader: MiniCssExtractPlugin.loader,
                },
                "css-loader",
                ],
            },
            ],
        },
        plugins: [
            new MiniCssExtractPlugin({
        +      filename: "[name].[chunkhash].css"
            }),
            new PurgecssPlugin({
            paths: glob.sync(`${PATHS.src}/**/*`,  { nodir: true }),
            }),
        ],
        };
    
    contenthash
        使用chunkhash存在一个问题，就是当在一个JS文件中引入CSS文件，编译后它们的hash是相同的，而且只要js文件发生改变 ，
        关联的css文件hash也会改变,这个时候可以使用mini-css-extract-plugin里的contenthash值，
        保证即使css文件所处的模块里就算其他文件内容改变，只要css文件内容不变，那么不会重复构建
        const path = require("path");
        const glob = require("glob");
        const PurgecssPlugin = require("purgecss-webpack-plugin");
        const MiniCssExtractPlugin = require('mini-css-extract-plugin');
        const PATHS = {
        src: path.join(__dirname, 'src')
        }
        module.exports = {
        mode: "production",
        entry: {
            main: './src/index.js',
            vender:['lodash']
        },
        output:{
            path:path.resolve(__dirname,'dist'),
            filename:'[name].[chunkhash].js'
        },
        devServer:{
            hot:false
        },
        module: {
            rules: [
            {
                test: /\.js/,
                include: path.resolve(__dirname, "src"),
                use: [
                {
                    loader:'thread-loader',
                    options:{
                    workers:3
                    }
                },
                {
                    loader: "babel-loader",
                    options: {
                    presets: ["@babel/preset-env", "@babel/preset-react"],
                    },
                },
                ],
            },
            {
                test: /\.css$/,
                include: path.resolve(__dirname, "src"),
                exclude: /node_modules/,
                use: [
                {
                    loader: MiniCssExtractPlugin.loader,
                },
                "css-loader",
                ],
            },
            ],
        },
        plugins: [
            new MiniCssExtractPlugin({
        +      filename: "[name].[contenthash].css"
            }),
            new PurgecssPlugin({
            paths: glob.sync(`${PATHS.src}/**/*`,  { nodir: true }),
            }),
        ],
        };
            
    
            