/*
    1. 代码分割
        对于大的Web应用来讲，将所有的代码都放在一个文件中显然是不够有效的，特别是当你的某些代码块是在某些特殊的时候才会被用到。
        webpack有一个功能就是将你的代码库分割成chunks语块，当代码运行到需要它们的时候再进行加载
    2. 入口点分割
        Entry Points：入口文件设置的时候可以配置
            这种方法的问题
            如果入口 chunks 之间包含重复的模块(lodash)，那些重复模块都会被引入到各个 bundle 中
            不够灵活，并且不能将核心应用程序逻辑进行动态拆分代码
        {
            entry: {
                page1: "./src/page1.js",
                page2: "./src/page2.js"
            }
        }
    3 动态导入和懒加载
        用户当前需要用什么功能就只加载这个功能对应的代码，也就是所谓的按需加载 在给单页应用做按需加载优化时
        一般采用以下原则：
            对网站功能进行划分，每一类一个chunk
            对于首次打开页面需要的功能直接加载，尽快展示给用户,某些依赖大量代码的功能点可以按需加载
            被分割出去的代码需要一个按需加载的时机            
*/
