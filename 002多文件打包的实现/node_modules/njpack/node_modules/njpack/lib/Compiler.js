const fs = require("fs");
const ejs = require("ejs");
const path = require("path");

class Compiler {
    constructor(config) {
        //1.保存配置文件（webpack.config.js）
        this.config = config;
        //2.保存自调用函数的参数（保存入口模块 + 模块依赖）
        this.modules = {};
    }

    //1.开始编译
    run() {
        //首次传递进去的路径是主模块路径,然后依次找到主模块的所有依赖
        this.buildModule(this.config.entry);
        //webpack进行打包
        this.emitFile();
    }

    buildModule(modulePath) {
        //1.读取入口文件中的内容
        let code = this.getSource(modulePath);
        //2.把入口模块中的所有内容以及依赖保存到modules中去
        this.modules[modulePath] = code;
    }


    //获取模块内容
    getSource(modulePath) {
        let content = fs.readFileSync(modulePath, "utf8");
        return content;
    }

    //webpack进行打包
    emitFile() {
        //1.读取ejs模板
        let templatePath = path.resolve(__dirname, "main.ejs");
        let template = fs.readFileSync(templatePath, "utf8");
        //2.利用变量替换模板中的内容
        let resultCode = ejs.render(template, {entryId: this.config.entry, modules: this.modules});
         //把改造后的代码写入到打包后的文件中去
        //3.将最终的代码写入到打包后的文件中
        //3.1获取输出的目录
        let outputDir = this.config.output.path;
        // //3.2判断目录是否存在
        if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir);
        }
        // //3.3获取指定文件或者文件路径
        let outputPath = path.resolve(outputDir, this.config.output.filename);
        fs.writeFileSync(outputPath, resultCode);
    }
}

module.exports = Compiler;









